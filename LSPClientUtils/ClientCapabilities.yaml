#
# Workspace specific client capabilities.
#
workspace:
  #
  # The client supports applying batch edits
  # to the workspace by supporting the request
  # 'workspace/applyEdit'
  #
  applyEdit:
    true

  #
  # Capabilities specific to `WorkspaceEdit`s
  #
  workspaceEdit:
    #
    # The client supports versioned document changes in `WorkspaceEdit`s
    #
    documentChanges:
      true

    #
    # The resource operations the client supports. Clients should at least
    # support 'create', 'rename' and 'delete' files and folders.
    #
    # @since 3.13.0
    #
    resourceOperations:
      #
      # Supports creating new files and folders.
      #
      - create
      #
      # Supports renaming existing files and folders.
      #
      - rename
      #
      # Supports deleting existing files and folders.
      #
      - delete

    #
    # The failure handling strategy of a client if applying the workspace edit
    # fails.
    #
    # @since 3.13.0
    #
    failureHandling:
      #
      # Applying the workspace change is simply aborted if one of the changes provided
      # fails. All operations executed before the failing operation stay executed.
      #
#       abort
      #
      # All operations are executed transactional. That means they either all
      # succeed or no changes at all are applied to the workspace.
      #
      transactional
      #
      # If the workspace edit contains only textual file changes they are executed transactional.
      # If resource changes (create, rename or delete file) are part of the change the failure
      # handling strategy is abort.
      #
#       textOnlyTransactional
      #
      # The client tries to undo the operations already executed. But there is no
      # guarantee that this is succeeding.
      #
#       undo

  #
  # Capabilities specific to the `workspace/didChangeConfiguration` notification.
  #
  didChangeConfiguration:
    #
    # Did change configuration notification supports dynamic registration.
    #
    dynamicRegistration:
      false

  #
  # Capabilities specific to the `workspace/didChangeWatchedFiles` notification.
  #
  didChangeWatchedFiles:
    #
    # Did change watched files notification supports dynamic registration. Please note
    # that the current protocol doesn't support static configuration for file changes
    # from the server side.
    #
    dynamicRegistration:
      false

  #
  # Capabilities specific to the `workspace/symbol` request.
  #
  symbol:
    #
    # Symbol request supports dynamic registration.
    #
    dynamicRegistration:
      false

    #
    # Specific capabilities for the `SymbolKind` in the `workspace/symbol` request.
    #
    symbolKind:
      #
      # The symbol kind values the client supports. When this
      # property exists the client also guarantees that it will
      # handle values outside its set gracefully and falls back
      # to a default value when unknown.
      #
      # If this property is not present the client only supports
      # the symbol kinds from `File` to `Array` as defined in
      # the initial version of the protocol.
      #
      valueSet:
        - 1  # File
        - 2  # Module
        - 3  # Namespace
        - 4  # Package
        - 5  # Class
        - 6  # Method
        - 7  # Property
        - 8  # Field
        - 9  # Constructor
        - 10 # Enum
        - 11 # Interface
        - 12 # Function
        - 13 # Variable
        - 14 # Constant
        - 15 # String
        - 16 # Number
        - 17 # Boolean
        - 18 # Array
        - 19 # Object
        - 20 # Key
        - 21 # Null
        - 22 # EnumMember
        - 23 # Struct
        - 24 # Event
        - 25 # Operator
        - 26 # TypeParameter

  #
  # Capabilities specific to the `workspace/executeCommand` request.
  #
  executeCommand:
    #
    # Execute command supports dynamic registration.
    #
    dynamicRegistration:
      false

#   #
#   # The client has support for workspace folders.
#   #
#   # Since 3.6.0
#   #
#   workspaceFolders:
#     false

#   #
#   # The client supports `workspace/configuration` requests.
#   #
#   # Since 3.6.0
#   #
#   configuration:
#     false

#
# Text document specific client capabilities.
#
textDocument:

  synchronization:
    #
    # Whether text document synchronization supports dynamic registration.
    #
    dynamicRegistration:
      false

    #
    # The client supports sending will save notifications.
    #
    willSave:
      false

    #
    # The client supports sending a will save request and
    # waits for a response providing text edits which will
    # be applied to the document before it is saved.
    #
    willSaveWaitUntil:
      false

    #
    # The client supports did save notifications.
    #
    didSave:
      false

  #
  # Capabilities specific to the `textDocument/completion` request.
  #
  completion:
    #
    # Whether completion supports dynamic registration.
    #
    dynamicRegistration:
      false

    #
    # The client supports the following `CompletionItem` specific
    # capabilities.
    #
    completionItem:
      #
      # Client supports snippets as insert text.
      #
      # A snippet can define tab stops and placeholders with `$1`, `$2`
      # and `${3:foo}`. `$0` defines the final tab stop, it defaults to
      # the end of the snippet. Placeholders with equal identifiers are linked,
      # that is typing in one will update others too.
      #
      snippetSupport:
        false

      #
      # Client supports commit characters on a completion item.
      #
      commitCharactersSupport:
        false

      #
      # Client supports the follow content formats for the documentation
      # property. The order describes the preferred format of the client.
      #
      documentationFormat:
        #
        # Plain text is supported as a content format
        #
        - plaintext

        #
        # Markdown is supported as a content format
        #
#         - markdown

      #
      # Client supports the deprecated property on a completion item.
      #
      deprecatedSupport:
        true

      #
      # Client supports the preselect property on a completion item.
      #
      preselectSupport:
        true

#       #
#       # Client supports the tag property on a completion item. Clients supporting
#       # tags have to handle unknown tags gracefully. Clients especially need to
#       # preserve unknown tags when sending a completion item back to the server in
#       # a resolve call.
#       #
#       # @since 3.15.0
#       #
#       tagSupport:
#         #
#         # The tags supported by the client.
#         #
#         valueSet:
#           #
#           # Render a completion as obsolete, usually using a strike-out.
#           #
#           - 1 # Deprecated

    completionItemKind:
      #
      # The completion item kind values the client supports. When this
      # property exists the client also guarantees that it will
      # handle values outside its set gracefully and falls back
      # to a default value when unknown.
      #
      # If this property is not present the client only supports
      # the completion items kinds from `Text` to `Reference` as defined in
      # the initial version of the protocol.
      #
      valueSet:
        - 1  # Text
        - 2  # Method
        - 3  # Function
        - 4  # Constructor
        - 5  # Field
        - 6  # Variable
        - 7  # Class
        - 8  # Interface
        - 9  # Module
        - 10 # Property
        - 11 # Unit
        - 12 # Value
        - 13 # Enum
        - 14 # Keyword
        - 15 # Snippet
        - 16 # Color
        - 17 # File
        - 18 # Reference
        - 19 # Folder
        - 20 # EnumMember
        - 21 # Constant
        - 22 # Struct
        - 23 # Event
        - 24 # Operator
        - 25 # TypeParameter

    #
    # The client supports to send additional context information for a
    # `textDocument/completion` request.
    #
    contextSupport:
      false

  #
  # Capabilities specific to the `textDocument/hover` request.
  #
  hover:
    #
    # Whether hover supports dynamic registration.
    #
    dynamicRegistration:
      false

    #
    # Client supports the follow content formats for the content
    # property. The order describes the preferred format of the client.
    #
    contentFormat:
      #
      # Plain text is supported as a content format
      #
      - plaintext

      #
      # Markdown is supported as a content format
      #
#       - markdown

#   #
#   # Capabilities specific to the `textDocument/signatureHelp` request.
#   #
#   signatureHelp:
#     #
#     # Whether signature help supports dynamic registration.
#     #
#     dynamicRegistration:
#       false
#     #
#     # The client supports the following `SignatureInformation`
#     # specific properties.
#     #
#     signatureInformation:
#       #
#       # Client supports the follow content formats for the documentation
#       # property. The order describes the preferred format of the client.
#       #
#       documentationFormat:
#         #
#         # Plain text is supported as a content format
#         #
#         - plaintext
#
#         #
#         # Markdown is supported as a content format
#         #
#         - markdown
#
#       #
#       # Client capabilities specific to parameter information.
#       #
#       parameterInformation:
#         #
#         # The client supports processing label offsets instead of a
#         # simple label string.
#         #
#         # @since 3.14.0
#         #
#         labelOffsetSupport:
#           false
#
#     #
#     # The client supports to send additional context information for a
#     # `textDocument/signatureHelp` request. A client that opts into
#     # contextSupport will also support the `retriggerCharacters` on
#     # `SignatureHelpOptions`.
#     #
#     # @since 3.15.0
#     #
#     contextSupport:
#       false

  #
  # Capabilities specific to the `textDocument/declaration` request.
  #
  # @since 3.14.0
  #
  declaration:
    #
    # Whether declaration supports dynamic registration. If this is set to `true`
    # the client supports the new `DeclarationRegistrationOptions` return value
    # for the corresponding server capability as well.
    #
    dynamicRegistration:
      false

    #
    # The client supports additional metadata in the form of declaration links.
    #
    linkSupport:
      false

  #
  # Capabilities specific to the `textDocument/definition` request.
  #
  definition:
    #
    # Whether definition supports dynamic registration.
    #
    dynamicRegistration:
      false

    #
    # The client supports additional metadata in the form of definition links.
    #
    # @since 3.14.0
    #
    linkSupport:
      false

  #
  # Capabilities specific to the `textDocument/typeDefinition` request.
  #
  # @since 3.6.0
  #
  typeDefinition:
    #
    # Whether implementation supports dynamic registration. If this is set to `true`
    # the client supports the new `TypeDefinitionRegistrationOptions` return value
    # for the corresponding server capability as well.
    #
    dynamicRegistration:
      false

    #
    # The client supports additional metadata in the form of definition links.
    #
    # @since 3.14.0
    #
    linkSupport:
      false

  #
  # Capabilities specific to the `textDocument/implementation` request.
  #
  # @since 3.6.0
  #
  implementation:
    #
    # Whether implementation supports dynamic registration. If this is set to `true`
    # the client supports the new `ImplementationRegistrationOptions` return value
    # for the corresponding server capability as well.
    #
    dynamicRegistration:
      false

    #
    # The client supports additional metadata in the form of definition links.
    #
    # @since 3.14.0
    #
    linkSupport:
      false

  #
  # Capabilities specific to the `textDocument/references` request.
  #
  references:
    #
    # Whether references supports dynamic registration.
    #
    dynamicRegistration:
      false

  #
  # Capabilities specific to the `textDocument/documentHighlight` request.
  #
  documentHighlight:
    #
    # Whether document highlight supports dynamic registration.
    #
    dynamicRegistration:
      false

  #
  # Capabilities specific to the `textDocument/documentSymbol` request.
  #
  documentSymbol:
    #
    # Whether document symbol supports dynamic registration.
    #
    dynamicRegistration:
      false

    #
    # Specific capabilities for the `SymbolKind` in the `textDocument/documentSymbol` request.
    #
    symbolKind:
      #
      # The symbol kind values the client supports. When this
      # property exists the client also guarantees that it will
      # handle values outside its set gracefully and falls back
      # to a default value when unknown.
      #
      # If this property is not present the client only supports
      # the symbol kinds from `File` to `Array` as defined in
      # the initial version of the protocol.
      #
      valueSet:
        - 1  # File
        - 2  # Module
        - 3  # Namespace
        - 4  # Package
        - 5  # Class
        - 6  # Method
        - 7  # Property
        - 8  # Field
        - 9  # Constructor
        - 10 # Enum
        - 11 # Interface
        - 12 # Function
        - 13 # Variable
        - 14 # Constant
        - 15 # String
        - 16 # Number
        - 17 # Boolean
        - 18 # Array
        - 19 # Object
        - 20 # Key
        - 21 # Null
        - 22 # EnumMember
        - 23 # Struct
        - 24 # Event
        - 25 # Operator
        - 26 # TypeParameter

    #
    # The client supports hierarchical document symbols.
    #
    hierarchicalDocumentSymbolSupport:
      false

  #
  # Capabilities specific to the `textDocument/codeAction` request.
  #
  codeAction:
    #
    # Whether code action supports dynamic registration.
    #
    dynamicRegistration:
      false

    #
    # The client supports code action literals as a valid
    # response of the `textDocument/codeAction` request.
    #
    # @since 3.8.0
    #
    codeActionLiteralSupport:
      #
      # The code action kind is supported with the following value
      # set.
      #
      codeActionKind:
        #
        # The code action kind values the client supports. When this
        # property exists the client also guarantees that it will
        # handle values outside its set gracefully and falls back
        # to a default value when unknown.
        #
        valueSet:
          #
          # Empty kind.
          #
          - ''

          #
          # Base kind for quickfix actions: 'quickfix'.
          #
          - quickfix

          #
          # Base kind for refactoring actions: 'refactor'.
          #
          - refactor

          #
          # Base kind for refactoring extraction actions: 'refactor.extract'.
          #
          # Example extract actions:
          #
          # - Extract method
          # - Extract function
          # - Extract variable
          # - Extract interface from class
          # - ...
          #
          - refactor.extract

          #
          # Base kind for refactoring inline actions: 'refactor.inline'.
          #
          # Example inline actions:
          #
          # - Inline function
          # - Inline variable
          # - Inline constant
          # - ...
          #
          - refactor.inline

          #
          # Base kind for refactoring rewrite actions: 'refactor.rewrite'.
          #
          # Example rewrite actions:
          #
          # - Convert JavaScript function to class
          # - Add or remove parameter
          # - Encapsulate field
          # - Make method static
          # - Move method to base class
          # - ...
          #
          - refactor.rewrite

          #
          # Base kind for source actions: `source`.
          #
          # Source code actions apply to the entire file.
          #
          - source

          #
          # Base kind for an organize imports source action: `source.organizeImports`.
          #
          - source.organizeImports

    #
    # Whether code action supports the `isPreferred` property.
    # @since 3.15.0
    #
    isPreferredSupport:
      false

#   #
#   # Capabilities specific to the `textDocument/codeLens` request.
#   #
#   codeLens:
#     #
#     # Whether code lens supports dynamic registration.
#     #
#     dynamicRegistration:
#       false

#   #
#   # Capabilities specific to the `textDocument/documentLink` request.
#   #
#   documentLink:
#     #
#     # Whether document link supports dynamic registration.
#     #
#     dynamicRegistration:
#       false
#
#     #
#     # Whether the client supports the `tooltip` property on `DocumentLink`.
#     #
#     # @since 3.15.0
#     #
#     tooltipSupport:
#       false

#   #
#   # Capabilities specific to the `textDocument/documentColor` and the
#   # `textDocument/colorPresentation` request.
#   #
#   # @since 3.6.0
#   #
#   colorProvider:
#     #
#     # Whether document color supports dynamic registration.
#     #
#     dynamicRegistration:
#       false

#   #
#   # Capabilities specific to the `textDocument/formatting` request.
#   #
#   formatting:
#     #
#     # Whether formatting supports dynamic registration.
#     #
#     dynamicRegistration:
#       false

  #
  # Capabilities specific to the `textDocument/rangeFormatting` request.
  #
  rangeFormatting:
    #
    # Whether formatting supports dynamic registration.
    #
    dynamicRegistration:
      false

#   #
#   # Capabilities specific to the `textDocument/onTypeFormatting` request.
#   #
#   onTypeFormatting:
#     #
#     # Whether on type formatting supports dynamic registration.
#     #
#     dynamicRegistration:
#       false

  #
  # Capabilities specific to the `textDocument/rename` request.
  #
  rename:
    #
    # Whether rename supports dynamic registration.
    #
    dynamicRegistration:
      false

    #
    # Client supports testing for validity of rename operations
    # before execution.
    #
    # @since version 3.12.0
    #
    prepareSupport:
      false

  #
  # Capabilities specific to the `textDocument/publishDiagnostics` notification.
  #
  publishDiagnostics:
    #
    # Whether the clients accepts diagnostics with related information.
    #
    relatedInformation:
      false

    #
    # Client supports the tag property to provide meta data about a diagnostic.
    # Clients supporting tags have to handle unknown tags gracefully.
    #
    # @since 3.15.0
    #
    tagSupport:
      #
      # The tags supported by the client.
      #
      valueSet:
        #
        # Unused or unnecessary code.
        #
        # Clients are allowed to render diagnostics with this tag faded out instead of having
        # an error squiggle.
        #
        - 1 # Unnecessary
        #
        # Deprecated or obsolete code.
        #
        # Clients are allowed to rendered diagnostics with this tag strike through.
        #
        - 2 # Deprecated

    #
    # Whether the client interprets the version property of the
    # `textDocument/publishDiagnostics` notification's parameter.
    #
    # @since 3.15.0
    #
    versionSupport:
      false

#   #
#   # Capabilities specific to the `textDocument/foldingRange` request.
#   #
#   # @since 3.10.0
#   #
#   foldingRange:
#     #
#     # Whether implementation supports dynamic registration for folding range providers. If this is set to `true`
#     # the client supports the new `FoldingRangeRegistrationOptions` return value for the corresponding server
#     # capability as well.
#     #
#     dynamicRegistration:
#       false
#
#     #
#     # The maximum number of folding ranges that the client prefers to receive per document. The value serves as a
#     # hint, servers are free to follow the limit.
#     #
#     rangeLimit:
#       type: number
#
#     #
#     # If set, the client signals that it only supports folding complete lines. If set, client will
#     # ignore specified `startCharacter` and `endCharacter` properties in a FoldingRange.
#     #
#     lineFoldingOnly:
#       false

  #
  # Capabilities specific to the `textDocument/selectionRange` request.
  #
  # @since 3.15.0
  #
  selectionRange:
    #
    # Whether implementation supports dynamic registration for selection range providers. If this is set to `true`
    # the client supports the new `SelectionRangeRegistrationOptions` return value for the corresponding server
    # capability as well.
    #
    dynamicRegistration:
      false

#
# Window specific client capabilities.
#
window:
  #
  # Whether client supports handling progress notifications. If set servers are allowed to
  # report in `workDoneProgress` property in the request specific server capabilities.
  #
  # Since 3.15.0
  #
  workDoneProgress:
    false

# #
# # Experimental client capabilities.
# #
# experimental:
#   type: any
